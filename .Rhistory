Feature1 = rnorm(n),
Feature2 = rnorm(n),
Feature3 = rnorm(n),
Target = factor(sample(c("Low", "High"), n, replace = TRUE))
)
# Display the first few rows of the dataset
head(random_data)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- createDataPartition(random_data$Target, p = 0.7, list = FALSE)
train_data <- random_data[train_index, ]
test_data <- random_data[-train_index, ]
# Support Vector Machine (SVM) model
svm_model <- svm(Target ~ ., data = train_data)
svm_predictions <- predict(svm_model, newdata = test_data)
# Random Forest model
rf_model <- randomForest(Target ~ ., data = train_data, ntree = 100)
rf_predictions <- predict(rf_model, newdata = test_data)
# Decision Tree model
dt_model <- rpart(Target ~ ., data = train_data, method = "class")
dt_predictions <- predict(dt_model, newdata = test_data, type = "class")
# Naive Bayes model
nb_model <- naiveBayes(Target ~ ., data = train_data)
nb_predictions <- predict(nb_model, newdata = test_data)
# Display confusion matrices for each model
confusion_svm <- confusionMatrix(svm_predictions, test_data$Target)
confusion_rf <- confusionMatrix(rf_predictions, test_data$Target)
confusion_dt <- confusionMatrix(dt_predictions, test_data$Target)
confusion_nb <- confusionMatrix(nb_predictions, test_data$Target)
print("Confusion Matrix for SVM:")
print(confusion_svm)
print("Confusion Matrix for Random Forest:")
print(confusion_rf)
print("Confusion Matrix for Decision Tree:")
print(confusion_dt)
print("Confusion Matrix for Naive Bayes:")
print(confusion_nb)
install.packages('ggthemes')
# Load required libraries
library(ggplot2)
library(ggthemes)
# Load the built-in mtcars dataset
data(mtcars)
# Display the structure of the dataset
str(mtcars)
# Display the first few rows of the dataset
head(mtcars)
# Summary statistics of the dataset
summary(mtcars)
# Plotting a scatter plot of mpg against hp with ggplot2
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "skyblue") +  # Add color to points
labs(title = "Scatter Plot of MPG against Horsepower",
x = "Horsepower",
y = "Miles per Gallon") +
theme_minimal()  # Use a minimal theme
# Create a subset of the dataset for cars with more than 100 horsepower
high_hp_cars <- subset(mtcars, hp > 100)
# Display the first few rows of the subset
head(high_hp_cars)
# Perform a t-test comparing miles per gallon (mpg) between high and low horsepower cars
t_test_result <- t.test(mtcars$mpg, high_hp_cars$mpg)
print(t_test_result)
# Linear regression model to predict mpg based on horsepower
linear_model <- lm(mpg ~ hp, data = mtcars)
# Display the summary of the linear model
summary(linear_model)
# Predict the mpg for a new car with 150 horsepower
new_car_hp <- 150
predicted_mpg <- predict(linear_model, newdata = data.frame(hp = new_car_hp))
print(paste("Predicted MPG for a car with", new_car_hp, "horsepower:", round(predicted_mpg, 2)))
# Visualize the linear regression line along with the data points
ggplot(mtcars, aes(x = hp, y = mpg)) +
geom_point(color = "skyblue") +
geom_smooth(method = "lm", se = FALSE, color = "red") +  # Add regression line
labs(title = "Linear Regression: MPG against Horsepower",
x = "Horsepower",
y = "Miles per Gallon") +
theme_minimal()
# Residual plot to check model assumptions
residuals <- resid(linear_model)
ggplot(mtcars, aes(x = hp, y = residuals)) +
geom_point(color = "orange") +
geom_hline(yintercept = 0, linetype = "dashed", color = "blue") +  # Add horizontal line at y = 0
labs(title = "Residual Plot",
x = "Horsepower",
y = "Residuals") +
theme_minimal()
install.packages('naivebayes')
install.packages('ROCR')
# Load necessary libraries
library(ggplot2)
library(caret)
library(e1071)
library(randomForest)
library(rpart)
library(naivebayes)
library(ROCR)
# Create a random well-structured DataFrame
set.seed(456)
n <- 200
random_data <- data.frame(
Feature1 = rnorm(n),
Feature2 = rnorm(n),
Feature3 = rnorm(n),
Target = factor(sample(c("Low", "High"), n, replace = TRUE))
)
# Display the first few rows of the dataset
head(random_data)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- createDataPartition(random_data$Target, p = 0.7, list = FALSE)
train_data <- random_data[train_index, ]
test_data <- random_data[-train_index, ]
# Support Vector Machine (SVM) model
svm_model <- svm(Target ~ ., data = train_data)
svm_predictions <- predict(svm_model, newdata = test_data)
# Random Forest model
rf_model <- randomForest(Target ~ ., data = train_data, ntree = 100)
rf_predictions <- predict(rf_model, newdata = test_data)
# Decision Tree model
dt_model <- rpart(Target ~ ., data = train_data, method = "class")
dt_predictions <- predict(dt_model, newdata = test_data, type = "class")
# Naive Bayes model
nb_model <- naiveBayes(Target ~ ., data = train_data)
nb_predictions <- predict(nb_model, newdata = test_data)
# Evaluate models using caret package
svm_metrics <- confusionMatrix(svm_predictions, test_data$Target)
rf_metrics <- confusionMatrix(rf_predictions, test_data$Target)
dt_metrics <- confusionMatrix(dt_predictions, test_data$Target)
nb_metrics <- confusionMatrix(nb_predictions, test_data$Target)
# Print confusion matrices
print("Confusion Matrix for SVM:")
print(svm_metrics)
print("Confusion Matrix for Random Forest:")
print(rf_metrics)
print("Confusion Matrix for Decision Tree:")
print(dt_metrics)
print("Confusion Matrix for Naive Bayes:")
print(nb_metrics)
# Colorful EDA Visualizations
# Example: Pair plot with color-coded Target variable
ggplot(random_data, aes(x = Feature1, y = Feature2, color = Target)) +
geom_point() +
labs(title = "Pair Plot with Color-Coded Target Variable")
# Additional Methods to View Model Accuracy
# ROC Curve for SVM
svm_roc <- prediction(attr(svm_model, "probabilities")[, 2], test_data$Target)
# Load necessary libraries
library(ggplot2)
library(caret)
library(e1071)
library(randomForest)
library(rpart)
library(naivebayes)
library(ROCR)
# Create a random well-structured DataFrame
set.seed(456)
n <- 200
random_data <- data.frame(
Feature1 = rnorm(n),
Feature2 = rnorm(n),
Feature3 = rnorm(n),
Target = factor(sample(c("Low", "High"), n, replace = TRUE))
)
# Display the first few rows of the dataset
head(random_data)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- createDataPartition(random_data$Target, p = 0.7, list = FALSE)
train_data <- random_data[train_index, ]
test_data <- random_data[-train_index, ]
# Support Vector Machine (SVM) model
svm_model <- svm(Target ~ ., data = train_data)
svm_predictions <- predict(svm_model, newdata = test_data)
# Random Forest model
rf_model <- randomForest(Target ~ ., data = train_data, ntree = 100)
rf_predictions <- predict(rf_model, newdata = test_data)
# Decision Tree model
dt_model <- rpart(Target ~ ., data = train_data, method = "class")
dt_predictions <- predict(dt_model, newdata = test_data, type = "class")
# Naive Bayes model
nb_model <- naiveBayes(Target ~ ., data = train_data)
nb_predictions <- predict(nb_model, newdata = test_data)
# Evaluate models using caret package
svm_metrics <- confusionMatrix(svm_predictions, test_data$Target)
rf_metrics <- confusionMatrix(rf_predictions, test_data$Target)
dt_metrics <- confusionMatrix(dt_predictions, test_data$Target)
nb_metrics <- confusionMatrix(nb_predictions, test_data$Target)
# Print confusion matrices
print("Confusion Matrix for SVM:")
print(svm_metrics)
print("Confusion Matrix for Random Forest:")
print(rf_metrics)
print("Confusion Matrix for Decision Tree:")
print(dt_metrics)
print("Confusion Matrix for Naive Bayes:")
print(nb_metrics)
# Colorful EDA Visualizations
# Example: Pair plot with color-coded Target variable
ggplot(random_data, aes(x = Feature1, y = Feature2, color = Target)) +
geom_point() +
labs(title = "Pair Plot with Color-Coded Target Variable")
# Feature Importance Plot for Random Forest
varImpPlot(rf_model, main = "Random Forest - Feature Importance")
# Decision Tree Plot
rpart.plot(dt_model, main = "Decision Tree Plot")
# Load necessary libraries
library(ggplot2)
library(caret)
library(e1071)
library(randomForest)
library(rpart)
library(naivebayes)
library(ROCR)
# Create a random well-structured DataFrame
set.seed(456)
n <- 200
random_data <- data.frame(
Feature1 = rnorm(n),
Feature2 = rnorm(n),
Feature3 = rnorm(n),
Target = factor(sample(c("Low", "High"), n, replace = TRUE))
)
# Display the first few rows of the dataset
head(random_data)
# Split the dataset into training and testing sets
set.seed(123)
train_index <- createDataPartition(random_data$Target, p = 0.7, list = FALSE)
train_data <- random_data[train_index, ]
test_data <- random_data[-train_index, ]
# Support Vector Machine (SVM) model
svm_model <- svm(Target ~ ., data = train_data)
svm_predictions <- predict(svm_model, newdata = test_data)
# Random Forest model
rf_model <- randomForest(Target ~ ., data = train_data, ntree = 100)
rf_predictions <- predict(rf_model, newdata = test_data)
# Decision Tree model
dt_model <- rpart(Target ~ ., data = train_data, method = "class")
dt_predictions <- predict(dt_model, newdata = test_data, type = "class")
# Naive Bayes model
nb_model <- naiveBayes(Target ~ ., data = train_data)
nb_predictions <- predict(nb_model, newdata = test_data)
# Evaluate models using caret package
svm_metrics <- confusionMatrix(svm_predictions, test_data$Target)
rf_metrics <- confusionMatrix(rf_predictions, test_data$Target)
dt_metrics <- confusionMatrix(dt_predictions, test_data$Target)
nb_metrics <- confusionMatrix(nb_predictions, test_data$Target)
# Print confusion matrices
print("Confusion Matrix for SVM:")
print(svm_metrics)
print("Confusion Matrix for Random Forest:")
print(rf_metrics)
print("Confusion Matrix for Decision Tree:")
print(dt_metrics)
print("Confusion Matrix for Naive Bayes:")
print(nb_metrics)
# Colorful EDA Visualizations
# Example: Pair plot with color-coded Target variable
ggplot(random_data, aes(x = Feature1, y = Feature2, color = Target)) +
geom_point() +
labs(title = "Pair Plot with Color-Coded Target Variable")
# Feature Importance Plot for Random Forest
varImpPlot(rf_model, main = "Random Forest - Feature Importance")
# Set seed for reproducibility
set.seed(123)
# Generate random data
num_rows <- 1000
data <- data.frame(
ID = 1:num_rows,
Age = sample(18:60, num_rows, replace = TRUE),
Height = rnorm(num_rows, mean = 170, sd = 10),
Weight = rnorm(num_rows, mean = 70, sd = 8)
)
# Summary statistics
summary_data <- summary(data)
# Plotting
par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
# Histogram of Age
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
# Scatter plot of Height vs Weight
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
# Boxplot of Age
boxplot(data$Age, main = "Boxplot of Age", col = "lightgreen", border = "black", horizontal = TRUE)
# Density plot of Height
plot(density(data$Height), main = "Density Plot of Height", xlab = "Height", col = "orange", lwd = 2)
# Print summary statistics
cat("\nSummary Statistics:\n")
print(summary_data)
# Correlation matrix
cor_matrix <- cor(data[, c("Age", "Height", "Weight")])
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
# Regression model
model <- lm(Weight ~ Age + Height, data = data)
summary_model <- summary(model)
cat("\nLinear Regression Model:\n")
print(summary_model)
# Save plots as PNG files
png("Age_Distribution.png")
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
dev.off()
png("Height_vs_Weight.png")
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
dev.off()
# Display saved plots
cat("\nPlots saved as PNG files: Age_Distribution.png, Height_vs_Weight.png\n")
# Install and load required packages
if (!requireNamespace("visdat", quietly = TRUE)) {
install.packages("visdat")
}
library(visdat)
# Set seed for reproducibility
set.seed(123)
# Generate random data
num_rows <- 1000
data <- data.frame(
ID = 1:num_rows,
Age = sample(18:60, num_rows, replace = TRUE),
Height = rnorm(num_rows, mean = 170, sd = 10),
Weight = rnorm(num_rows, mean = 70, sd = 8),
Income = rnorm(num_rows, mean = 50000, sd = 10000),
Education = sample(c("High School", "Bachelor's", "Master's", "PhD"), num_rows, replace = TRUE),
Region = sample(c("North", "South", "East", "West"), num_rows, replace = TRUE)
)
# Introduce missing values
data[sample(1:num_rows, 100, replace = FALSE), "Income"] <- NA
# Visualize missing values
vis_dat(data)
# Summary statistics
summary_data <- summary(data)
# Plotting
par(mfrow = c(3, 2), mar = c(4, 4, 2, 1))
# Histogram of Age
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
# Scatter plot of Height vs Weight
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
# Boxplot of Income
boxplot(data$Income, main = "Boxplot of Income", col = "lightgreen", border = "black", horizontal = TRUE)
# Bar plot of Education
barplot(table(data$Education), main = "Education Distribution", col = "orange", border = "black")
# Pie chart of Region
pie(table(data$Region), main = "Region Distribution", col = rainbow(length(levels(data$Region))))
# Density plot of Age
plot(density(data$Age), main = "Density Plot of Age", xlab = "Age", col = "purple", lwd = 2)
# Print summary statistics
cat("\nSummary Statistics:\n")
print(summary_data)
# Correlation matrix
cor_matrix <- cor(data[, c("Age", "Height", "Weight", "Income")], use = "complete.obs")
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
# Regression model
model <- lm(Weight ~ Age + Height + Income, data = data, na.action = na.exclude)
summary_model <- summary(model)
cat("\nLinear Regression Model:\n")
print(summary_model)
# Save plots as PNG files
png("Age_Distribution.png")
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
dev.off()
png("Height_vs_Weight.png")
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
dev.off()
png("Income_Boxplot.png")
boxplot(data$Income, main = "Boxplot of Income", col = "lightgreen", border = "black", horizontal = TRUE)
dev.off()
png("Education_Barplot.png")
barplot(table(data$Education), main = "Education Distribution", col = "orange", border = "black")
dev.off()
png("Region_Piechart.png")
pie(table(data$Region), main = "Region Distribution", col = rainbow(length(levels(data$Region))))
dev.off()
png("Age_Density.png")
plot(density(data$Age), main = "Density Plot of Age", xlab = "Age", col = "purple", lwd = 2)
dev.off()
# Display saved plots
cat("\nPlots saved as PNG files: Age_Distribution.png, Height_vs_Weight.png, Income_Boxplot.png, Education_Barplot.png, Region_Piechart.png, Age_Density.png\n")
library(visdat)
# Set seed for reproducibility
set.seed(123)
# Generate random data
num_rows <- 1000
data <- data.frame(
ID = 1:num_rows,
Age = sample(18:60, num_rows, replace = TRUE),
Height = rnorm(num_rows, mean = 170, sd = 10),
Weight = rnorm(num_rows, mean = 70, sd = 8),
Income = rnorm(num_rows, mean = 50000, sd = 10000),
Education = sample(c("High School", "Bachelor's", "Master's", "PhD"), num_rows, replace = TRUE),
Region = sample(c("North", "South", "East", "West"), num_rows, replace = TRUE)
)
# Introduce missing values
data[sample(1:num_rows, 100, replace = FALSE), "Income"] <- NA
# Visualize missing values
vis_dat(data)
# Summary statistics
summary_data <- summary(data)
# Plotting
par(mfrow = c(3, 2), mar = c(4, 4, 2, 1))
# Histogram of Age
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
# Scatter plot of Height vs Weight
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
# Boxplot of Income
boxplot(data$Income, main = "Boxplot of Income", col = "lightgreen", border = "black", horizontal = TRUE)
# Bar plot of Education
barplot(table(data$Education), main = "Education Distribution", col = "orange", border = "black")
# Pie chart of Region
pie(table(data$Region), main = "Region Distribution", col = rainbow(length(levels(data$Region))))
# Density plot of Age
plot(density(data$Age), main = "Density Plot of Age", xlab = "Age", col = "purple", lwd = 2)
# Print summary statistics
cat("\nSummary Statistics:\n")
print(summary_data)
# Correlation matrix
cor_matrix <- cor(data[, c("Age", "Height", "Weight", "Income")], use = "complete.obs")
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
# Regression model
model <- lm(Weight ~ Age + Height + Income, data = data, na.action = na.exclude)
summary_model <- summary(model)
cat("\nLinear Regression Model:\n")
print(summary_model)
# Save plots as PNG files
png("Age_Distribution.png")
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
dev.off()
png("Height_vs_Weight.png")
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
dev.off()
png("Income_Boxplot.png")
boxplot(data$Income, main = "Boxplot of Income", col = "lightgreen", border = "black", horizontal = TRUE)
dev.off()
png("Education_Barplot.png")
barplot(table(data$Education), main = "Education Distribution", col = "orange", border = "black")
dev.off()
png("Region_Piechart.png")
pie(table(data$Region), main = "Region Distribution", col = rainbow(length(levels(data$Region))))
dev.off()
png("Age_Density.png")
plot(density(data$Age), main = "Density Plot of Age", xlab = "Age", col = "purple", lwd = 2)
dev.off()
# Display saved plots
cat("\nPlots saved as PNG files: Age_Distribution.png, Height_vs_Weight.png, Income_Boxplot.png, Education_Barplot.png, Region_Piechart.png, Age_Density.png\n")
library(visdat)
# Set seed for reproducibility
set.seed(123)
# Generate random data
num_rows <- 1000
data <- data.frame(
ID = 1:num_rows,
Age = sample(18:60, num_rows, replace = TRUE),
Height = rnorm(num_rows, mean = 170, sd = 10),
Weight = rnorm(num_rows, mean = 70, sd = 8),
Income = rnorm(num_rows, mean = 50000, sd = 10000),
Education = sample(c("High School", "Bachelor's", "Master's", "PhD"), num_rows, replace = TRUE),
Region = sample(c("North", "South", "East", "West"), num_rows, replace = TRUE)
)
# Introduce missing values
data[sample(1:num_rows, 100, replace = FALSE), "Income"] <- NA
# Visualize missing values
vis_dat(data)
# Summary statistics
summary_data <- summary(data)
# Plotting
par(mfrow = c(3, 2), mar = c(4, 4, 2, 1))
# Histogram of Age
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
# Scatter plot of Height vs Weight
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
# Boxplot of Income
boxplot(data$Income, main = "Boxplot of Income", col = "lightgreen", border = "black", horizontal = TRUE)
# Bar plot of Education
barplot(table(data$Education), main = "Education Distribution", col = "orange", border = "black")
# Pie chart of Region
pie(table(data$Region), main = "Region Distribution", col = rainbow(length(levels(data$Region))))
# Density plot of Age
plot(density(data$Age), main = "Density Plot of Age", xlab = "Age", col = "purple", lwd = 2)
# Print summary statistics
cat("\nSummary Statistics:\n")
print(summary_data)
# Correlation matrix
cor_matrix <- cor(data[, c("Age", "Height", "Weight", "Income")], use = "complete.obs")
cat("\nCorrelation Matrix:\n")
print(cor_matrix)
# Regression model
model <- lm(Weight ~ Age + Height + Income, data = data, na.action = na.exclude)
summary_model <- summary(model)
cat("\nLinear Regression Model:\n")
print(summary_model)
# Save plots as PNG files
png("Age_Distribution.png")
hist(data$Age, main = "Age Distribution", xlab = "Age", col = "lightblue", border = "black")
dev.off()
png("Height_vs_Weight.png")
plot(data$Height, data$Weight, main = "Height vs Weight", xlab = "Height", ylab = "Weight", col = "blue")
dev.off()
png("Income_Boxplot.png")
boxplot(data$Income, main = "Boxplot of Income", col = "lightgreen", border = "black", horizontal = TRUE)
dev.off()
png("Education_Barplot.png")
barplot(table(data$Education), main = "Education Distribution", col = "orange", border = "black")
dev.off()
png("Region_Piechart.png")
pie(table(data$Region), main = "Region Distribution", col = rainbow(length(levels(data$Region))))
dev.off()
png("Age_Density.png")
plot(density(data$Age), main = "Density Plot of Age", xlab = "Age", col = "purple", lwd = 2)
dev.off()
# Display saved plots
cat("\nPlots saved as PNG files: Age_Distribution.png, Height_vs_Weight.png, Income_Boxplot.png, Education_Barplot.png, Region_Piechart.png, Age_Density.png\n")
